const services = ["paving", "roof-cleaning-and-repairing", "artificial-grass", "fencing", "house-painting", "fascias-and-gutters", "driveways", "gutter-cleaning"];

function markdownToHtml(markdown) {
    let html = markdown
        .replace(/^# (.*$)/gim, '<h3 class="text-xl font-semibold mb-4">$1</h3>')
        .replace(/^## (.*$)/gim, '<h4 class="text-lg mb-2">$1</h4>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1" class="w-full service-img rounded-lg shadow mb-4" onerror="this.src=\'/uploads/fallback.jpg\'">')
        .replace(/\n/g, '<br>');
    return `<p class="text-gray-600 mb-4">${html.trim()}</p>`;
}

async function loadServices() {
    const container = document.getElementById("services-list");
    for (let name of services) {
        try {
            const res = await fetch(`/content/services/${name}.md`);
            if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
            const text = await res.text();
            const titleMatch = text.match(/^# (.*$)/m);
            const title = titleMatch ? titleMatch[1].trim() : name;
            const body = text.split('\n').slice(titleMatch ? 1 : 0).join('\n').trim();
            const htmlContent = markdownToHtml(body);
            const div = document.createElement("div");
            div.className = "bg-white p-6 rounded-lg shadow";
            div.innerHTML = `<h3 class="text-xl font-semibold mb-4">${title}</h3>${htmlContent}`;
            container.appendChild(div);
        } catch (e) {
            const div = document.createElement("div");
            div.className = "bg-white p-6 rounded-lg shadow";
            div.innerHTML = `
                <img src="/uploads/${name}.jpg" alt="${name}" class="w-full service-img rounded-lg shadow mb-4" onerror="this.src='/uploads/fallback.jpg'">
                <h3 class="text-xl font-semibold mb-4">${name}</h3>
                <p class="text-gray-600 mb-4">Service details unavailable.</p>
            `;
            container.appendChild(div);
        }
    }
}
